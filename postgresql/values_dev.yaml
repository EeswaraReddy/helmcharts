auth:
  database: ''
  enablePostgresUser: true
  existingSecret: ''
  password: ''
  postgresPassword: ''
  replicationPassword: ''
  replicationUsername: repl_user
  secretKeys:
    adminPasswordKey: postgres-password
    replicationPasswordKey: replication-password
    userPasswordKey: password
  usePasswordFiles: false
  username: ''
global:
  compatibility:
    openshift:
      adaptSecurityContext: auto
  defaultStorageClass: ''
  imagePullSecrets: []
  imageRegistry: ''
  postgresql:
    auth:
      database: default
      existingSecret: ''
      password: init_password
      postgresPassword: chimera-postgres@123
      secretKeys:
        adminPasswordKey: ''
        replicationPasswordKey: ''
        userPasswordKey: ''
      username: init_user
    service:
      ports:
        postgresql: '5432'
  security:
    allowInsecureImages: false
  storageClass: ''
image:
  debug: false
  digest: ''
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/postgresql
  tag: 17.4.0-debian-12-r4
metrics:
  collectors: {}
  containerPorts:
    metrics: 9187
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customMetrics: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraEnvVars: []
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.17.1-debian-12-r0
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  prometheusRule:
    enabled: false
    labels: {}
    namespace: ''
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources: {}
  resourcesPreset: nano
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
      prometheus.io/scrape: 'true'
    clusterIP: ''
    ports:
      metrics: 9187
    sessionAffinity: None
  serviceMonitor:
    enabled: true
    honorLabels: false
    interval: ''
    jobLabel: ''
    labels: {}
    metricRelabelings: []
    namespace: ''
    relabelings: []
    scrapeTimeout: ''
    selector: {}
  startupProbe:
    enabled: true
    failureThreshold: 15
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
postgresqlDataDir: /var/lib/postgresql/data
primary:
  affinity: {}
  annotations: {}
  args: []
  automountServiceAccountToken: false
  command: []
  configuration: ''
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  existingConfigmap: ''
  existingExtendedConfigmap: ''
  extendedConfiguration: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraPodSpec: {}
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  hostIPC: false
  hostNetwork: false
  initContainers: []
  initdb:
    args: ''
    password: ''
    postgresqlWalDir: ''
    scripts: ''
    scriptsConfigMap: ''
    scriptsSecret: ''
    user: ''
  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  name: primary
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  pdb:
    create: true
    maxUnavailable: ''
    minAvailable: ''
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    dataSource: {}
    enabled: true
    existingClaim: ''
    labels: {}
    mountPath: /var/lib/postgresql
    selector: {}
    size: 8Gi
    storageClass: ''
    subPath: ''
    volumeName: data
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenDeleted: Retain
    whenScaled: Retain
  pgHbaConfiguration: ''
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  preInitDb:
    scripts: {}
    scriptsConfigMap: ''
    scriptsSecret: ''
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources: {}
  resourcesPreset: nano
  schedulerName: ''
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerClass: ''
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePorts:
      postgresql: ''
    ports:
      postgresql: 5432
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  sidecars: []
  standby:
    enabled: false
    primaryHost: ''
    primaryPort: ''
  startupProbe:
    enabled: true
    failureThreshold: 15
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
readReplicas:
  affinity: {}
  annotations: {}
  args: []
  automountServiceAccountToken: false
  command: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extendedConfiguration: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraPodSpec: {}
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  hostIPC: false
  hostNetwork: false
  #initContainers: []
  initContainers:
  - name: create-tablespace-dirs
    image: bitnami/os-shell:12-debian-12-r39
    command:
      - /bin/bash
      - -c
      - |
        mkdir -p /var/lib/postgresql/data/ts_chimera_meta
        mkdir -p /var/lib/postgresql/data/ts_chimera_data
        mkdir -p /var/lib/postgresql/data/ts_chimera_index
        mkdir -p /var/lib/postgresql/data/ts_chimera_temp
        mkdir -p /var/lib/postgresql/data/ts_chimera_wal
        mkdir -p /var/lib/postgresql/data/ts_chimera_dh
    volumeMounts:
      - name: data
        mountPath: /var/lib/postgresql/data

  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  name: read
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  pdb:
    create: true
    maxUnavailable: ''
    minAvailable: ''
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    dataSource: {}
    enabled: true
    existingClaim: ''
    labels: {}
    mountPath: /var/lib/postgresql
    selector: {}
    size: 8Gi
    storageClass: ''
    subPath: ''
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenDeleted: Retain
    whenScaled: Retain
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  resourcesPreset: nano
  schedulerName: ''
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerClass: ''
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePorts:
      postgresql: ''
    ports:
      postgresql: 5432
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  sidecars: []
  startupProbe:
    enabled: true
    failureThreshold: 15
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
volumePermissions:
  containerSecurityContext:
    runAsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  enabled: false
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r39
  resources: {}
  resourcesPreset: nano

